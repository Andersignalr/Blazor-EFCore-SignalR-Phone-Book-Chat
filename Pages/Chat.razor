@page "/chat"

@using Microsoft.AspNetCore.SignalR.Client
@inject IDbContextFactory<ContactContext> DbFactory
@inject NavigationManager Navigation
@inject IJSRuntime js
@implements IAsyncDisposable

<h3>Chat</h3>

<div>
	<ul>
		@foreach (var mensagem in mensagens)
		{
			<li>@mensagem</li>
		}
	</ul>
</div>

<input id="txtMensagem" type="text" @bind="novaMensagem" />
<button @onclick="EnviarMensagem">Enviar</button>

@code {
	private List<string> mensagens = new List<string>();
	private string novaMensagem = "";

	private HubConnection hubConnection;

	protected override async Task OnInitializedAsync()
	{
		using var context = DbFactory.CreateDbContext();
		if (context.ChatMessages is not null)
		{
			var chatMessages = await context.ChatMessages.AsQueryable().ToListAsync();
			foreach (var message in chatMessages)
			{
				var encodedMsg = $"{message.SenderId}: {message.Content}";
				mensagens.Add(encodedMsg);
				await InvokeAsync(StateHasChanged);
			}
		}

		hubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri("/chathub"))
			.Build();

		hubConnection.On<string, string>("ReceberMensagem", async (user, message) =>
		{
			using var context = DbFactory.CreateDbContext();

			if (context is not null && context.ChatMessages is not null)
			{

				context.ChatMessages.Add(new ChatMessage
					{
						Content = message,
						SenderId = user,
						ReceiverId = "Global",
						Timestamp = DateTime.Now
					});

				try
				{
					await context.SaveChangesAsync();
				}
				catch (Exception ex)
				{
					Console.WriteLine(ex);
				}
			}

			var encodedMsg = $"{user}: {message}";
			mensagens.Add(encodedMsg);
			await InvokeAsync(StateHasChanged);
		});

		await hubConnection.StartAsync();
	}

	private async Task EnviarMensagem()
	{
		if (novaMensagem is not null)
		{
			await hubConnection.SendAsync("EnviarMensagem", "NomeDoUsuario", novaMensagem);
			novaMensagem = "";
		}
		await Focus("txtMensagem");
	}

	public async Task Focus(string elementId)
	{
		await js.InvokeVoidAsync("focusById", elementId);
	}

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}
